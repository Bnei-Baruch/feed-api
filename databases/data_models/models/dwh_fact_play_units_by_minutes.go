// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DWHFactPlayUnitsByMinute is an object representing the database table.
type DWHFactPlayUnitsByMinute struct {
	EventUnitUID        null.String  `boil:"event_unit_uid" json:"event_unit_uid,omitempty" toml:"event_unit_uid" yaml:"event_unit_uid,omitempty"`
	EventUserID         null.String  `boil:"event_user_id" json:"event_user_id,omitempty" toml:"event_user_id" yaml:"event_user_id,omitempty"`
	EventLanguage       null.String  `boil:"event_language" json:"event_language,omitempty" toml:"event_language" yaml:"event_language,omitempty"`
	EventUserAgentType  null.String  `boil:"event_user_agent_type" json:"event_user_agent_type,omitempty" toml:"event_user_agent_type" yaml:"event_user_agent_type,omitempty"`
	EventEndMinute      null.Time    `boil:"event_end_minute" json:"event_end_minute,omitempty" toml:"event_end_minute" yaml:"event_end_minute,omitempty"`
	EventEndIDMax       string       `boil:"event_end_id_max" json:"event_end_id_max" toml:"event_end_id_max" yaml:"event_end_id_max"`
	EventCount          null.Int64   `boil:"event_count" json:"event_count,omitempty" toml:"event_count" yaml:"event_count,omitempty"`
	EventDurationSecSum null.Float64 `boil:"event_duration_sec_sum" json:"event_duration_sec_sum,omitempty" toml:"event_duration_sec_sum" yaml:"event_duration_sec_sum,omitempty"`
	DWHUpdateDatetime   null.Time    `boil:"dwh_update_datetime" json:"dwh_update_datetime,omitempty" toml:"dwh_update_datetime" yaml:"dwh_update_datetime,omitempty"`

	R *dwhFactPlayUnitsByMinuteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dwhFactPlayUnitsByMinuteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DWHFactPlayUnitsByMinuteColumns = struct {
	EventUnitUID        string
	EventUserID         string
	EventLanguage       string
	EventUserAgentType  string
	EventEndMinute      string
	EventEndIDMax       string
	EventCount          string
	EventDurationSecSum string
	DWHUpdateDatetime   string
}{
	EventUnitUID:        "event_unit_uid",
	EventUserID:         "event_user_id",
	EventLanguage:       "event_language",
	EventUserAgentType:  "event_user_agent_type",
	EventEndMinute:      "event_end_minute",
	EventEndIDMax:       "event_end_id_max",
	EventCount:          "event_count",
	EventDurationSecSum: "event_duration_sec_sum",
	DWHUpdateDatetime:   "dwh_update_datetime",
}

// Generated where

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DWHFactPlayUnitsByMinuteWhere = struct {
	EventUnitUID        whereHelpernull_String
	EventUserID         whereHelpernull_String
	EventLanguage       whereHelpernull_String
	EventUserAgentType  whereHelpernull_String
	EventEndMinute      whereHelpernull_Time
	EventEndIDMax       whereHelperstring
	EventCount          whereHelpernull_Int64
	EventDurationSecSum whereHelpernull_Float64
	DWHUpdateDatetime   whereHelpernull_Time
}{
	EventUnitUID:        whereHelpernull_String{field: "\"dwh_fact_play_units_by_minutes\".\"event_unit_uid\""},
	EventUserID:         whereHelpernull_String{field: "\"dwh_fact_play_units_by_minutes\".\"event_user_id\""},
	EventLanguage:       whereHelpernull_String{field: "\"dwh_fact_play_units_by_minutes\".\"event_language\""},
	EventUserAgentType:  whereHelpernull_String{field: "\"dwh_fact_play_units_by_minutes\".\"event_user_agent_type\""},
	EventEndMinute:      whereHelpernull_Time{field: "\"dwh_fact_play_units_by_minutes\".\"event_end_minute\""},
	EventEndIDMax:       whereHelperstring{field: "\"dwh_fact_play_units_by_minutes\".\"event_end_id_max\""},
	EventCount:          whereHelpernull_Int64{field: "\"dwh_fact_play_units_by_minutes\".\"event_count\""},
	EventDurationSecSum: whereHelpernull_Float64{field: "\"dwh_fact_play_units_by_minutes\".\"event_duration_sec_sum\""},
	DWHUpdateDatetime:   whereHelpernull_Time{field: "\"dwh_fact_play_units_by_minutes\".\"dwh_update_datetime\""},
}

// DWHFactPlayUnitsByMinuteRels is where relationship names are stored.
var DWHFactPlayUnitsByMinuteRels = struct {
}{}

// dwhFactPlayUnitsByMinuteR is where relationships are stored.
type dwhFactPlayUnitsByMinuteR struct {
}

// NewStruct creates a new relationship struct
func (*dwhFactPlayUnitsByMinuteR) NewStruct() *dwhFactPlayUnitsByMinuteR {
	return &dwhFactPlayUnitsByMinuteR{}
}

// dwhFactPlayUnitsByMinuteL is where Load methods for each relationship are stored.
type dwhFactPlayUnitsByMinuteL struct{}

var (
	dwhFactPlayUnitsByMinuteAllColumns            = []string{"event_unit_uid", "event_user_id", "event_language", "event_user_agent_type", "event_end_minute", "event_end_id_max", "event_count", "event_duration_sec_sum", "dwh_update_datetime"}
	dwhFactPlayUnitsByMinuteColumnsWithoutDefault = []string{"event_unit_uid", "event_user_id", "event_language", "event_user_agent_type", "event_end_minute", "event_end_id_max", "event_count", "event_duration_sec_sum", "dwh_update_datetime"}
	dwhFactPlayUnitsByMinuteColumnsWithDefault    = []string{}
	dwhFactPlayUnitsByMinutePrimaryKeyColumns     = []string{"event_end_id_max"}
)

type (
	// DWHFactPlayUnitsByMinuteSlice is an alias for a slice of pointers to DWHFactPlayUnitsByMinute.
	// This should generally be used opposed to []DWHFactPlayUnitsByMinute.
	DWHFactPlayUnitsByMinuteSlice []*DWHFactPlayUnitsByMinute

	dwhFactPlayUnitsByMinuteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dwhFactPlayUnitsByMinuteType                 = reflect.TypeOf(&DWHFactPlayUnitsByMinute{})
	dwhFactPlayUnitsByMinuteMapping              = queries.MakeStructMapping(dwhFactPlayUnitsByMinuteType)
	dwhFactPlayUnitsByMinutePrimaryKeyMapping, _ = queries.BindMapping(dwhFactPlayUnitsByMinuteType, dwhFactPlayUnitsByMinuteMapping, dwhFactPlayUnitsByMinutePrimaryKeyColumns)
	dwhFactPlayUnitsByMinuteInsertCacheMut       sync.RWMutex
	dwhFactPlayUnitsByMinuteInsertCache          = make(map[string]insertCache)
	dwhFactPlayUnitsByMinuteUpdateCacheMut       sync.RWMutex
	dwhFactPlayUnitsByMinuteUpdateCache          = make(map[string]updateCache)
	dwhFactPlayUnitsByMinuteUpsertCacheMut       sync.RWMutex
	dwhFactPlayUnitsByMinuteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dwhFactPlayUnitsByMinute record from the query.
func (q dwhFactPlayUnitsByMinuteQuery) One(exec boil.Executor) (*DWHFactPlayUnitsByMinute, error) {
	o := &DWHFactPlayUnitsByMinute{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dwh_fact_play_units_by_minutes")
	}

	return o, nil
}

// All returns all DWHFactPlayUnitsByMinute records from the query.
func (q dwhFactPlayUnitsByMinuteQuery) All(exec boil.Executor) (DWHFactPlayUnitsByMinuteSlice, error) {
	var o []*DWHFactPlayUnitsByMinute

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DWHFactPlayUnitsByMinute slice")
	}

	return o, nil
}

// Count returns the count of all DWHFactPlayUnitsByMinute records in the query.
func (q dwhFactPlayUnitsByMinuteQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dwh_fact_play_units_by_minutes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dwhFactPlayUnitsByMinuteQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dwh_fact_play_units_by_minutes exists")
	}

	return count > 0, nil
}

// DWHFactPlayUnitsByMinutes retrieves all the records using an executor.
func DWHFactPlayUnitsByMinutes(mods ...qm.QueryMod) dwhFactPlayUnitsByMinuteQuery {
	mods = append(mods, qm.From("\"dwh_fact_play_units_by_minutes\""))
	return dwhFactPlayUnitsByMinuteQuery{NewQuery(mods...)}
}

// FindDWHFactPlayUnitsByMinute retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDWHFactPlayUnitsByMinute(exec boil.Executor, eventEndIDMax string, selectCols ...string) (*DWHFactPlayUnitsByMinute, error) {
	dwhFactPlayUnitsByMinuteObj := &DWHFactPlayUnitsByMinute{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dwh_fact_play_units_by_minutes\" where \"event_end_id_max\"=$1", sel,
	)

	q := queries.Raw(query, eventEndIDMax)

	err := q.Bind(nil, exec, dwhFactPlayUnitsByMinuteObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dwh_fact_play_units_by_minutes")
	}

	return dwhFactPlayUnitsByMinuteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DWHFactPlayUnitsByMinute) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dwh_fact_play_units_by_minutes provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dwhFactPlayUnitsByMinuteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dwhFactPlayUnitsByMinuteInsertCacheMut.RLock()
	cache, cached := dwhFactPlayUnitsByMinuteInsertCache[key]
	dwhFactPlayUnitsByMinuteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dwhFactPlayUnitsByMinuteAllColumns,
			dwhFactPlayUnitsByMinuteColumnsWithDefault,
			dwhFactPlayUnitsByMinuteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dwhFactPlayUnitsByMinuteType, dwhFactPlayUnitsByMinuteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dwhFactPlayUnitsByMinuteType, dwhFactPlayUnitsByMinuteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dwh_fact_play_units_by_minutes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dwh_fact_play_units_by_minutes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dwh_fact_play_units_by_minutes")
	}

	if !cached {
		dwhFactPlayUnitsByMinuteInsertCacheMut.Lock()
		dwhFactPlayUnitsByMinuteInsertCache[key] = cache
		dwhFactPlayUnitsByMinuteInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DWHFactPlayUnitsByMinute.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DWHFactPlayUnitsByMinute) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	dwhFactPlayUnitsByMinuteUpdateCacheMut.RLock()
	cache, cached := dwhFactPlayUnitsByMinuteUpdateCache[key]
	dwhFactPlayUnitsByMinuteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dwhFactPlayUnitsByMinuteAllColumns,
			dwhFactPlayUnitsByMinutePrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dwh_fact_play_units_by_minutes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dwh_fact_play_units_by_minutes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dwhFactPlayUnitsByMinutePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dwhFactPlayUnitsByMinuteType, dwhFactPlayUnitsByMinuteMapping, append(wl, dwhFactPlayUnitsByMinutePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dwh_fact_play_units_by_minutes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dwh_fact_play_units_by_minutes")
	}

	if !cached {
		dwhFactPlayUnitsByMinuteUpdateCacheMut.Lock()
		dwhFactPlayUnitsByMinuteUpdateCache[key] = cache
		dwhFactPlayUnitsByMinuteUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q dwhFactPlayUnitsByMinuteQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dwh_fact_play_units_by_minutes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dwh_fact_play_units_by_minutes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DWHFactPlayUnitsByMinuteSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dwhFactPlayUnitsByMinutePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dwh_fact_play_units_by_minutes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dwhFactPlayUnitsByMinutePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dwhFactPlayUnitsByMinute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dwhFactPlayUnitsByMinute")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DWHFactPlayUnitsByMinute) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dwh_fact_play_units_by_minutes provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dwhFactPlayUnitsByMinuteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dwhFactPlayUnitsByMinuteUpsertCacheMut.RLock()
	cache, cached := dwhFactPlayUnitsByMinuteUpsertCache[key]
	dwhFactPlayUnitsByMinuteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dwhFactPlayUnitsByMinuteAllColumns,
			dwhFactPlayUnitsByMinuteColumnsWithDefault,
			dwhFactPlayUnitsByMinuteColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dwhFactPlayUnitsByMinuteAllColumns,
			dwhFactPlayUnitsByMinutePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert dwh_fact_play_units_by_minutes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dwhFactPlayUnitsByMinutePrimaryKeyColumns))
			copy(conflict, dwhFactPlayUnitsByMinutePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"dwh_fact_play_units_by_minutes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dwhFactPlayUnitsByMinuteType, dwhFactPlayUnitsByMinuteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dwhFactPlayUnitsByMinuteType, dwhFactPlayUnitsByMinuteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert dwh_fact_play_units_by_minutes")
	}

	if !cached {
		dwhFactPlayUnitsByMinuteUpsertCacheMut.Lock()
		dwhFactPlayUnitsByMinuteUpsertCache[key] = cache
		dwhFactPlayUnitsByMinuteUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DWHFactPlayUnitsByMinute record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DWHFactPlayUnitsByMinute) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DWHFactPlayUnitsByMinute provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dwhFactPlayUnitsByMinutePrimaryKeyMapping)
	sql := "DELETE FROM \"dwh_fact_play_units_by_minutes\" WHERE \"event_end_id_max\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dwh_fact_play_units_by_minutes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dwh_fact_play_units_by_minutes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dwhFactPlayUnitsByMinuteQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dwhFactPlayUnitsByMinuteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dwh_fact_play_units_by_minutes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dwh_fact_play_units_by_minutes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DWHFactPlayUnitsByMinuteSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dwhFactPlayUnitsByMinutePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dwh_fact_play_units_by_minutes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dwhFactPlayUnitsByMinutePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dwhFactPlayUnitsByMinute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dwh_fact_play_units_by_minutes")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DWHFactPlayUnitsByMinute) Reload(exec boil.Executor) error {
	ret, err := FindDWHFactPlayUnitsByMinute(exec, o.EventEndIDMax)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DWHFactPlayUnitsByMinuteSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DWHFactPlayUnitsByMinuteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dwhFactPlayUnitsByMinutePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dwh_fact_play_units_by_minutes\".* FROM \"dwh_fact_play_units_by_minutes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dwhFactPlayUnitsByMinutePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DWHFactPlayUnitsByMinuteSlice")
	}

	*o = slice

	return nil
}

// DWHFactPlayUnitsByMinuteExists checks if the DWHFactPlayUnitsByMinute row exists.
func DWHFactPlayUnitsByMinuteExists(exec boil.Executor, eventEndIDMax string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dwh_fact_play_units_by_minutes\" where \"event_end_id_max\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, eventEndIDMax)
	}
	row := exec.QueryRow(sql, eventEndIDMax)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dwh_fact_play_units_by_minutes exists")
	}

	return exists, nil
}
