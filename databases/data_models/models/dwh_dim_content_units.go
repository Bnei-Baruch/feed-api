// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DWHDimContentUnit is an object representing the database table.
type DWHDimContentUnit struct {
	ContentUnitID        null.Int    `boil:"content_unit_id" json:"content_unit_id,omitempty" toml:"content_unit_id" yaml:"content_unit_id,omitempty"`
	ContentUnitUID       string      `boil:"content_unit_uid" json:"content_unit_uid" toml:"content_unit_uid" yaml:"content_unit_uid"`
	ContentUnitCreatedAt null.Time   `boil:"content_unit_created_at" json:"content_unit_created_at,omitempty" toml:"content_unit_created_at" yaml:"content_unit_created_at,omitempty"`
	ContentUnitDuration  null.Int64  `boil:"content_unit_duration" json:"content_unit_duration,omitempty" toml:"content_unit_duration" yaml:"content_unit_duration,omitempty"`
	ContentUnitTypeID    null.Int64  `boil:"content_unit_type_id" json:"content_unit_type_id,omitempty" toml:"content_unit_type_id" yaml:"content_unit_type_id,omitempty"`
	ContentUnitTypeName  null.String `boil:"content_unit_type_name" json:"content_unit_type_name,omitempty" toml:"content_unit_type_name" yaml:"content_unit_type_name,omitempty"`
	ContentUnitName      null.String `boil:"content_unit_name" json:"content_unit_name,omitempty" toml:"content_unit_name" yaml:"content_unit_name,omitempty"`
	ContentUnitLanguage  string      `boil:"content_unit_language" json:"content_unit_language" toml:"content_unit_language" yaml:"content_unit_language"`

	R *dwhDimContentUnitR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dwhDimContentUnitL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DWHDimContentUnitColumns = struct {
	ContentUnitID        string
	ContentUnitUID       string
	ContentUnitCreatedAt string
	ContentUnitDuration  string
	ContentUnitTypeID    string
	ContentUnitTypeName  string
	ContentUnitName      string
	ContentUnitLanguage  string
}{
	ContentUnitID:        "content_unit_id",
	ContentUnitUID:       "content_unit_uid",
	ContentUnitCreatedAt: "content_unit_created_at",
	ContentUnitDuration:  "content_unit_duration",
	ContentUnitTypeID:    "content_unit_type_id",
	ContentUnitTypeName:  "content_unit_type_name",
	ContentUnitName:      "content_unit_name",
	ContentUnitLanguage:  "content_unit_language",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DWHDimContentUnitWhere = struct {
	ContentUnitID        whereHelpernull_Int
	ContentUnitUID       whereHelperstring
	ContentUnitCreatedAt whereHelpernull_Time
	ContentUnitDuration  whereHelpernull_Int64
	ContentUnitTypeID    whereHelpernull_Int64
	ContentUnitTypeName  whereHelpernull_String
	ContentUnitName      whereHelpernull_String
	ContentUnitLanguage  whereHelperstring
}{
	ContentUnitID:        whereHelpernull_Int{field: "\"dwh_dim_content_units\".\"content_unit_id\""},
	ContentUnitUID:       whereHelperstring{field: "\"dwh_dim_content_units\".\"content_unit_uid\""},
	ContentUnitCreatedAt: whereHelpernull_Time{field: "\"dwh_dim_content_units\".\"content_unit_created_at\""},
	ContentUnitDuration:  whereHelpernull_Int64{field: "\"dwh_dim_content_units\".\"content_unit_duration\""},
	ContentUnitTypeID:    whereHelpernull_Int64{field: "\"dwh_dim_content_units\".\"content_unit_type_id\""},
	ContentUnitTypeName:  whereHelpernull_String{field: "\"dwh_dim_content_units\".\"content_unit_type_name\""},
	ContentUnitName:      whereHelpernull_String{field: "\"dwh_dim_content_units\".\"content_unit_name\""},
	ContentUnitLanguage:  whereHelperstring{field: "\"dwh_dim_content_units\".\"content_unit_language\""},
}

// DWHDimContentUnitRels is where relationship names are stored.
var DWHDimContentUnitRels = struct {
}{}

// dwhDimContentUnitR is where relationships are stored.
type dwhDimContentUnitR struct {
}

// NewStruct creates a new relationship struct
func (*dwhDimContentUnitR) NewStruct() *dwhDimContentUnitR {
	return &dwhDimContentUnitR{}
}

// dwhDimContentUnitL is where Load methods for each relationship are stored.
type dwhDimContentUnitL struct{}

var (
	dwhDimContentUnitAllColumns            = []string{"content_unit_id", "content_unit_uid", "content_unit_created_at", "content_unit_duration", "content_unit_type_id", "content_unit_type_name", "content_unit_name", "content_unit_language"}
	dwhDimContentUnitColumnsWithoutDefault = []string{"content_unit_id", "content_unit_uid", "content_unit_created_at", "content_unit_duration", "content_unit_type_id", "content_unit_type_name", "content_unit_name", "content_unit_language"}
	dwhDimContentUnitColumnsWithDefault    = []string{}
	dwhDimContentUnitPrimaryKeyColumns     = []string{"content_unit_uid", "content_unit_language"}
)

type (
	// DWHDimContentUnitSlice is an alias for a slice of pointers to DWHDimContentUnit.
	// This should generally be used opposed to []DWHDimContentUnit.
	DWHDimContentUnitSlice []*DWHDimContentUnit

	dwhDimContentUnitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dwhDimContentUnitType                 = reflect.TypeOf(&DWHDimContentUnit{})
	dwhDimContentUnitMapping              = queries.MakeStructMapping(dwhDimContentUnitType)
	dwhDimContentUnitPrimaryKeyMapping, _ = queries.BindMapping(dwhDimContentUnitType, dwhDimContentUnitMapping, dwhDimContentUnitPrimaryKeyColumns)
	dwhDimContentUnitInsertCacheMut       sync.RWMutex
	dwhDimContentUnitInsertCache          = make(map[string]insertCache)
	dwhDimContentUnitUpdateCacheMut       sync.RWMutex
	dwhDimContentUnitUpdateCache          = make(map[string]updateCache)
	dwhDimContentUnitUpsertCacheMut       sync.RWMutex
	dwhDimContentUnitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dwhDimContentUnit record from the query.
func (q dwhDimContentUnitQuery) One(exec boil.Executor) (*DWHDimContentUnit, error) {
	o := &DWHDimContentUnit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dwh_dim_content_units")
	}

	return o, nil
}

// All returns all DWHDimContentUnit records from the query.
func (q dwhDimContentUnitQuery) All(exec boil.Executor) (DWHDimContentUnitSlice, error) {
	var o []*DWHDimContentUnit

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DWHDimContentUnit slice")
	}

	return o, nil
}

// Count returns the count of all DWHDimContentUnit records in the query.
func (q dwhDimContentUnitQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dwh_dim_content_units rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dwhDimContentUnitQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dwh_dim_content_units exists")
	}

	return count > 0, nil
}

// DWHDimContentUnits retrieves all the records using an executor.
func DWHDimContentUnits(mods ...qm.QueryMod) dwhDimContentUnitQuery {
	mods = append(mods, qm.From("\"dwh_dim_content_units\""))
	return dwhDimContentUnitQuery{NewQuery(mods...)}
}

// FindDWHDimContentUnit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDWHDimContentUnit(exec boil.Executor, contentUnitUID string, contentUnitLanguage string, selectCols ...string) (*DWHDimContentUnit, error) {
	dwhDimContentUnitObj := &DWHDimContentUnit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dwh_dim_content_units\" where \"content_unit_uid\"=$1 AND \"content_unit_language\"=$2", sel,
	)

	q := queries.Raw(query, contentUnitUID, contentUnitLanguage)

	err := q.Bind(nil, exec, dwhDimContentUnitObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dwh_dim_content_units")
	}

	return dwhDimContentUnitObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DWHDimContentUnit) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dwh_dim_content_units provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dwhDimContentUnitColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dwhDimContentUnitInsertCacheMut.RLock()
	cache, cached := dwhDimContentUnitInsertCache[key]
	dwhDimContentUnitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dwhDimContentUnitAllColumns,
			dwhDimContentUnitColumnsWithDefault,
			dwhDimContentUnitColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dwhDimContentUnitType, dwhDimContentUnitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dwhDimContentUnitType, dwhDimContentUnitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dwh_dim_content_units\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dwh_dim_content_units\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dwh_dim_content_units")
	}

	if !cached {
		dwhDimContentUnitInsertCacheMut.Lock()
		dwhDimContentUnitInsertCache[key] = cache
		dwhDimContentUnitInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DWHDimContentUnit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DWHDimContentUnit) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	dwhDimContentUnitUpdateCacheMut.RLock()
	cache, cached := dwhDimContentUnitUpdateCache[key]
	dwhDimContentUnitUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dwhDimContentUnitAllColumns,
			dwhDimContentUnitPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dwh_dim_content_units, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dwh_dim_content_units\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dwhDimContentUnitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dwhDimContentUnitType, dwhDimContentUnitMapping, append(wl, dwhDimContentUnitPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dwh_dim_content_units row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dwh_dim_content_units")
	}

	if !cached {
		dwhDimContentUnitUpdateCacheMut.Lock()
		dwhDimContentUnitUpdateCache[key] = cache
		dwhDimContentUnitUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q dwhDimContentUnitQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dwh_dim_content_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dwh_dim_content_units")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DWHDimContentUnitSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dwhDimContentUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dwh_dim_content_units\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dwhDimContentUnitPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dwhDimContentUnit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dwhDimContentUnit")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DWHDimContentUnit) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dwh_dim_content_units provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dwhDimContentUnitColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dwhDimContentUnitUpsertCacheMut.RLock()
	cache, cached := dwhDimContentUnitUpsertCache[key]
	dwhDimContentUnitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dwhDimContentUnitAllColumns,
			dwhDimContentUnitColumnsWithDefault,
			dwhDimContentUnitColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dwhDimContentUnitAllColumns,
			dwhDimContentUnitPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert dwh_dim_content_units, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dwhDimContentUnitPrimaryKeyColumns))
			copy(conflict, dwhDimContentUnitPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"dwh_dim_content_units\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dwhDimContentUnitType, dwhDimContentUnitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dwhDimContentUnitType, dwhDimContentUnitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert dwh_dim_content_units")
	}

	if !cached {
		dwhDimContentUnitUpsertCacheMut.Lock()
		dwhDimContentUnitUpsertCache[key] = cache
		dwhDimContentUnitUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DWHDimContentUnit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DWHDimContentUnit) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DWHDimContentUnit provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dwhDimContentUnitPrimaryKeyMapping)
	sql := "DELETE FROM \"dwh_dim_content_units\" WHERE \"content_unit_uid\"=$1 AND \"content_unit_language\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dwh_dim_content_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dwh_dim_content_units")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dwhDimContentUnitQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dwhDimContentUnitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dwh_dim_content_units")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dwh_dim_content_units")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DWHDimContentUnitSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dwhDimContentUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dwh_dim_content_units\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dwhDimContentUnitPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dwhDimContentUnit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dwh_dim_content_units")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DWHDimContentUnit) Reload(exec boil.Executor) error {
	ret, err := FindDWHDimContentUnit(exec, o.ContentUnitUID, o.ContentUnitLanguage)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DWHDimContentUnitSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DWHDimContentUnitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dwhDimContentUnitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dwh_dim_content_units\".* FROM \"dwh_dim_content_units\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dwhDimContentUnitPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DWHDimContentUnitSlice")
	}

	*o = slice

	return nil
}

// DWHDimContentUnitExists checks if the DWHDimContentUnit row exists.
func DWHDimContentUnitExists(exec boil.Executor, contentUnitUID string, contentUnitLanguage string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dwh_dim_content_units\" where \"content_unit_uid\"=$1 AND \"content_unit_language\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, contentUnitUID, contentUnitLanguage)
	}
	row := exec.QueryRow(sql, contentUnitUID, contentUnitLanguage)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dwh_dim_content_units exists")
	}

	return exists, nil
}
