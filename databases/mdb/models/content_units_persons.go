// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ContentUnitsPerson is an object representing the database table.
type ContentUnitsPerson struct {
	ContentUnitID int64 `boil:"content_unit_id" json:"content_unit_id" toml:"content_unit_id" yaml:"content_unit_id"`
	PersonID      int64 `boil:"person_id" json:"person_id" toml:"person_id" yaml:"person_id"`
	RoleID        int64 `boil:"role_id" json:"role_id" toml:"role_id" yaml:"role_id"`

	R *contentUnitsPersonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L contentUnitsPersonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ContentUnitsPersonColumns = struct {
	ContentUnitID string
	PersonID      string
	RoleID        string
}{
	ContentUnitID: "content_unit_id",
	PersonID:      "person_id",
	RoleID:        "role_id",
}

// Generated where

var ContentUnitsPersonWhere = struct {
	ContentUnitID whereHelperint64
	PersonID      whereHelperint64
	RoleID        whereHelperint64
}{
	ContentUnitID: whereHelperint64{field: "\"content_units_persons\".\"content_unit_id\""},
	PersonID:      whereHelperint64{field: "\"content_units_persons\".\"person_id\""},
	RoleID:        whereHelperint64{field: "\"content_units_persons\".\"role_id\""},
}

// ContentUnitsPersonRels is where relationship names are stored.
var ContentUnitsPersonRels = struct {
	ContentUnit string
	Person      string
	Role        string
}{
	ContentUnit: "ContentUnit",
	Person:      "Person",
	Role:        "Role",
}

// contentUnitsPersonR is where relationships are stored.
type contentUnitsPersonR struct {
	ContentUnit *ContentUnit
	Person      *Person
	Role        *ContentRoleType
}

// NewStruct creates a new relationship struct
func (*contentUnitsPersonR) NewStruct() *contentUnitsPersonR {
	return &contentUnitsPersonR{}
}

// contentUnitsPersonL is where Load methods for each relationship are stored.
type contentUnitsPersonL struct{}

var (
	contentUnitsPersonAllColumns            = []string{"content_unit_id", "person_id", "role_id"}
	contentUnitsPersonColumnsWithoutDefault = []string{"content_unit_id", "person_id", "role_id"}
	contentUnitsPersonColumnsWithDefault    = []string{}
	contentUnitsPersonPrimaryKeyColumns     = []string{"content_unit_id", "person_id"}
)

type (
	// ContentUnitsPersonSlice is an alias for a slice of pointers to ContentUnitsPerson.
	// This should generally be used opposed to []ContentUnitsPerson.
	ContentUnitsPersonSlice []*ContentUnitsPerson

	contentUnitsPersonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	contentUnitsPersonType                 = reflect.TypeOf(&ContentUnitsPerson{})
	contentUnitsPersonMapping              = queries.MakeStructMapping(contentUnitsPersonType)
	contentUnitsPersonPrimaryKeyMapping, _ = queries.BindMapping(contentUnitsPersonType, contentUnitsPersonMapping, contentUnitsPersonPrimaryKeyColumns)
	contentUnitsPersonInsertCacheMut       sync.RWMutex
	contentUnitsPersonInsertCache          = make(map[string]insertCache)
	contentUnitsPersonUpdateCacheMut       sync.RWMutex
	contentUnitsPersonUpdateCache          = make(map[string]updateCache)
	contentUnitsPersonUpsertCacheMut       sync.RWMutex
	contentUnitsPersonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single contentUnitsPerson record from the query.
func (q contentUnitsPersonQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ContentUnitsPerson, error) {
	o := &ContentUnitsPerson{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for content_units_persons")
	}

	return o, nil
}

// All returns all ContentUnitsPerson records from the query.
func (q contentUnitsPersonQuery) All(ctx context.Context, exec boil.ContextExecutor) (ContentUnitsPersonSlice, error) {
	var o []*ContentUnitsPerson

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ContentUnitsPerson slice")
	}

	return o, nil
}

// Count returns the count of all ContentUnitsPerson records in the query.
func (q contentUnitsPersonQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count content_units_persons rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q contentUnitsPersonQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if content_units_persons exists")
	}

	return count > 0, nil
}

// ContentUnit pointed to by the foreign key.
func (o *ContentUnitsPerson) ContentUnit(mods ...qm.QueryMod) contentUnitQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ContentUnitID),
	}

	queryMods = append(queryMods, mods...)

	query := ContentUnits(queryMods...)
	queries.SetFrom(query.Query, "\"content_units\"")

	return query
}

// Person pointed to by the foreign key.
func (o *ContentUnitsPerson) Person(mods ...qm.QueryMod) personQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PersonID),
	}

	queryMods = append(queryMods, mods...)

	query := Persons(queryMods...)
	queries.SetFrom(query.Query, "\"persons\"")

	return query
}

// Role pointed to by the foreign key.
func (o *ContentUnitsPerson) Role(mods ...qm.QueryMod) contentRoleTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RoleID),
	}

	queryMods = append(queryMods, mods...)

	query := ContentRoleTypes(queryMods...)
	queries.SetFrom(query.Query, "\"content_role_types\"")

	return query
}

// LoadContentUnit allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (contentUnitsPersonL) LoadContentUnit(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContentUnitsPerson interface{}, mods queries.Applicator) error {
	var slice []*ContentUnitsPerson
	var object *ContentUnitsPerson

	if singular {
		object = maybeContentUnitsPerson.(*ContentUnitsPerson)
	} else {
		slice = *maybeContentUnitsPerson.(*[]*ContentUnitsPerson)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contentUnitsPersonR{}
		}
		args = append(args, object.ContentUnitID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentUnitsPersonR{}
			}

			for _, a := range args {
				if a == obj.ContentUnitID {
					continue Outer
				}
			}

			args = append(args, obj.ContentUnitID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`content_units`), qm.WhereIn(`content_units.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ContentUnit")
	}

	var resultSlice []*ContentUnit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ContentUnit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for content_units")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for content_units")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ContentUnit = foreign
		if foreign.R == nil {
			foreign.R = &contentUnitR{}
		}
		foreign.R.ContentUnitsPersons = append(foreign.R.ContentUnitsPersons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContentUnitID == foreign.ID {
				local.R.ContentUnit = foreign
				if foreign.R == nil {
					foreign.R = &contentUnitR{}
				}
				foreign.R.ContentUnitsPersons = append(foreign.R.ContentUnitsPersons, local)
				break
			}
		}
	}

	return nil
}

// LoadPerson allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (contentUnitsPersonL) LoadPerson(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContentUnitsPerson interface{}, mods queries.Applicator) error {
	var slice []*ContentUnitsPerson
	var object *ContentUnitsPerson

	if singular {
		object = maybeContentUnitsPerson.(*ContentUnitsPerson)
	} else {
		slice = *maybeContentUnitsPerson.(*[]*ContentUnitsPerson)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contentUnitsPersonR{}
		}
		args = append(args, object.PersonID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentUnitsPersonR{}
			}

			for _, a := range args {
				if a == obj.PersonID {
					continue Outer
				}
			}

			args = append(args, obj.PersonID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`persons`), qm.WhereIn(`persons.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Person")
	}

	var resultSlice []*Person
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Person")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for persons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for persons")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Person = foreign
		if foreign.R == nil {
			foreign.R = &personR{}
		}
		foreign.R.ContentUnitsPersons = append(foreign.R.ContentUnitsPersons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PersonID == foreign.ID {
				local.R.Person = foreign
				if foreign.R == nil {
					foreign.R = &personR{}
				}
				foreign.R.ContentUnitsPersons = append(foreign.R.ContentUnitsPersons, local)
				break
			}
		}
	}

	return nil
}

// LoadRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (contentUnitsPersonL) LoadRole(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContentUnitsPerson interface{}, mods queries.Applicator) error {
	var slice []*ContentUnitsPerson
	var object *ContentUnitsPerson

	if singular {
		object = maybeContentUnitsPerson.(*ContentUnitsPerson)
	} else {
		slice = *maybeContentUnitsPerson.(*[]*ContentUnitsPerson)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &contentUnitsPersonR{}
		}
		args = append(args, object.RoleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentUnitsPersonR{}
			}

			for _, a := range args {
				if a == obj.RoleID {
					continue Outer
				}
			}

			args = append(args, obj.RoleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`content_role_types`), qm.WhereIn(`content_role_types.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ContentRoleType")
	}

	var resultSlice []*ContentRoleType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ContentRoleType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for content_role_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for content_role_types")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Role = foreign
		if foreign.R == nil {
			foreign.R = &contentRoleTypeR{}
		}
		foreign.R.RoleContentUnitsPersons = append(foreign.R.RoleContentUnitsPersons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleID == foreign.ID {
				local.R.Role = foreign
				if foreign.R == nil {
					foreign.R = &contentRoleTypeR{}
				}
				foreign.R.RoleContentUnitsPersons = append(foreign.R.RoleContentUnitsPersons, local)
				break
			}
		}
	}

	return nil
}

// SetContentUnit of the contentUnitsPerson to the related item.
// Sets o.R.ContentUnit to related.
// Adds o to related.R.ContentUnitsPersons.
func (o *ContentUnitsPerson) SetContentUnit(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ContentUnit) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"content_units_persons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"content_unit_id"}),
		strmangle.WhereClause("\"", "\"", 2, contentUnitsPersonPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ContentUnitID, o.PersonID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContentUnitID = related.ID
	if o.R == nil {
		o.R = &contentUnitsPersonR{
			ContentUnit: related,
		}
	} else {
		o.R.ContentUnit = related
	}

	if related.R == nil {
		related.R = &contentUnitR{
			ContentUnitsPersons: ContentUnitsPersonSlice{o},
		}
	} else {
		related.R.ContentUnitsPersons = append(related.R.ContentUnitsPersons, o)
	}

	return nil
}

// SetPerson of the contentUnitsPerson to the related item.
// Sets o.R.Person to related.
// Adds o to related.R.ContentUnitsPersons.
func (o *ContentUnitsPerson) SetPerson(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Person) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"content_units_persons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"person_id"}),
		strmangle.WhereClause("\"", "\"", 2, contentUnitsPersonPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ContentUnitID, o.PersonID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PersonID = related.ID
	if o.R == nil {
		o.R = &contentUnitsPersonR{
			Person: related,
		}
	} else {
		o.R.Person = related
	}

	if related.R == nil {
		related.R = &personR{
			ContentUnitsPersons: ContentUnitsPersonSlice{o},
		}
	} else {
		related.R.ContentUnitsPersons = append(related.R.ContentUnitsPersons, o)
	}

	return nil
}

// SetRole of the contentUnitsPerson to the related item.
// Sets o.R.Role to related.
// Adds o to related.R.RoleContentUnitsPersons.
func (o *ContentUnitsPerson) SetRole(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ContentRoleType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"content_units_persons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"role_id"}),
		strmangle.WhereClause("\"", "\"", 2, contentUnitsPersonPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ContentUnitID, o.PersonID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleID = related.ID
	if o.R == nil {
		o.R = &contentUnitsPersonR{
			Role: related,
		}
	} else {
		o.R.Role = related
	}

	if related.R == nil {
		related.R = &contentRoleTypeR{
			RoleContentUnitsPersons: ContentUnitsPersonSlice{o},
		}
	} else {
		related.R.RoleContentUnitsPersons = append(related.R.RoleContentUnitsPersons, o)
	}

	return nil
}

// ContentUnitsPersons retrieves all the records using an executor.
func ContentUnitsPersons(mods ...qm.QueryMod) contentUnitsPersonQuery {
	mods = append(mods, qm.From("\"content_units_persons\""))
	return contentUnitsPersonQuery{NewQuery(mods...)}
}

// FindContentUnitsPerson retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindContentUnitsPerson(ctx context.Context, exec boil.ContextExecutor, contentUnitID int64, personID int64, selectCols ...string) (*ContentUnitsPerson, error) {
	contentUnitsPersonObj := &ContentUnitsPerson{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"content_units_persons\" where \"content_unit_id\"=$1 AND \"person_id\"=$2", sel,
	)

	q := queries.Raw(query, contentUnitID, personID)

	err := q.Bind(ctx, exec, contentUnitsPersonObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from content_units_persons")
	}

	return contentUnitsPersonObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ContentUnitsPerson) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no content_units_persons provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(contentUnitsPersonColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	contentUnitsPersonInsertCacheMut.RLock()
	cache, cached := contentUnitsPersonInsertCache[key]
	contentUnitsPersonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			contentUnitsPersonAllColumns,
			contentUnitsPersonColumnsWithDefault,
			contentUnitsPersonColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(contentUnitsPersonType, contentUnitsPersonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(contentUnitsPersonType, contentUnitsPersonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"content_units_persons\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"content_units_persons\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into content_units_persons")
	}

	if !cached {
		contentUnitsPersonInsertCacheMut.Lock()
		contentUnitsPersonInsertCache[key] = cache
		contentUnitsPersonInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ContentUnitsPerson.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ContentUnitsPerson) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	contentUnitsPersonUpdateCacheMut.RLock()
	cache, cached := contentUnitsPersonUpdateCache[key]
	contentUnitsPersonUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			contentUnitsPersonAllColumns,
			contentUnitsPersonPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update content_units_persons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"content_units_persons\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, contentUnitsPersonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(contentUnitsPersonType, contentUnitsPersonMapping, append(wl, contentUnitsPersonPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update content_units_persons row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for content_units_persons")
	}

	if !cached {
		contentUnitsPersonUpdateCacheMut.Lock()
		contentUnitsPersonUpdateCache[key] = cache
		contentUnitsPersonUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q contentUnitsPersonQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for content_units_persons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for content_units_persons")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ContentUnitsPersonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentUnitsPersonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"content_units_persons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, contentUnitsPersonPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in contentUnitsPerson slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all contentUnitsPerson")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ContentUnitsPerson) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no content_units_persons provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(contentUnitsPersonColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	contentUnitsPersonUpsertCacheMut.RLock()
	cache, cached := contentUnitsPersonUpsertCache[key]
	contentUnitsPersonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			contentUnitsPersonAllColumns,
			contentUnitsPersonColumnsWithDefault,
			contentUnitsPersonColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			contentUnitsPersonAllColumns,
			contentUnitsPersonPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert content_units_persons, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(contentUnitsPersonPrimaryKeyColumns))
			copy(conflict, contentUnitsPersonPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"content_units_persons\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(contentUnitsPersonType, contentUnitsPersonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(contentUnitsPersonType, contentUnitsPersonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert content_units_persons")
	}

	if !cached {
		contentUnitsPersonUpsertCacheMut.Lock()
		contentUnitsPersonUpsertCache[key] = cache
		contentUnitsPersonUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ContentUnitsPerson record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ContentUnitsPerson) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ContentUnitsPerson provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), contentUnitsPersonPrimaryKeyMapping)
	sql := "DELETE FROM \"content_units_persons\" WHERE \"content_unit_id\"=$1 AND \"person_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from content_units_persons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for content_units_persons")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q contentUnitsPersonQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no contentUnitsPersonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from content_units_persons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for content_units_persons")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ContentUnitsPersonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentUnitsPersonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"content_units_persons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contentUnitsPersonPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from contentUnitsPerson slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for content_units_persons")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ContentUnitsPerson) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindContentUnitsPerson(ctx, exec, o.ContentUnitID, o.PersonID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContentUnitsPersonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ContentUnitsPersonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentUnitsPersonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"content_units_persons\".* FROM \"content_units_persons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contentUnitsPersonPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ContentUnitsPersonSlice")
	}

	*o = slice

	return nil
}

// ContentUnitsPersonExists checks if the ContentUnitsPerson row exists.
func ContentUnitsPersonExists(ctx context.Context, exec boil.ContextExecutor, contentUnitID int64, personID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"content_units_persons\" where \"content_unit_id\"=$1 AND \"person_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, contentUnitID, personID)
	}
	row := exec.QueryRowContext(ctx, sql, contentUnitID, personID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if content_units_persons exists")
	}

	return exists, nil
}
